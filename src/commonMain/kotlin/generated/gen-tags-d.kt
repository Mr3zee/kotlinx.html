package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
interface I_DATALIST {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DATALIST(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DATALIST, HTMLTag("datalist", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
/**
 * Selectable choice
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun I_DATALIST.option(classes : String? = null, crossinline block : OPTION.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    OPTION(attributesMapOf("class", classes), consumer).visit(block)
}
/**
 * Selectable choice
 */
@HtmlTagMarker
fun I_DATALIST.option(classes : String? = null, content : String = "") : Unit = OPTION(attributesMapOf("class", classes), consumer).visit({+content})

val DATALIST.asFlowContent : FlowContent
    get()  = this

val DATALIST.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
interface I_DD {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DD, HTMLTag("dd", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
interface I_DEL {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DEL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DEL, HTMLTag("del", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {
    var cite : String
        get()  = attributeStringString[this, "cite"]
        set(newValue) {attributeStringString[this, "cite"] = newValue}

    var dateTime : String
        get()  = attributeStringString[this, "datetime"]
        set(newValue) {attributeStringString[this, "datetime"] = newValue}


}
val DEL.asFlowContent : FlowContent
    get()  = this

val DEL.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
interface I_DETAILS {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DETAILS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DETAILS, HTMLTag("details", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractiveContent {
    var open : Boolean
        get()  = attributeBooleanTicker[this, "open"]
        set(newValue) {attributeBooleanTicker[this, "open"] = newValue}


}
/**
 * Fieldset legend
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun I_DETAILS.legend(classes : String? = null, crossinline block : LEGEND.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    LEGEND(attributesMapOf("class", classes), consumer).visit(block)
}

val DETAILS.asFlowContent : FlowContent
    get()  = this

val DETAILS.asInteractiveContent : InteractiveContent
    get()  = this


@Suppress("unused")
interface I_DFN {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DFN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DFN, HTMLTag("dfn", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val DFN.asFlowContent : FlowContent
    get()  = this

val DFN.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
interface I_DIALOG {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DIALOG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DIALOG, HTMLTag("dialog", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
interface I_DIV {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DIV(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DIV, HTMLTag("div", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
interface I_DL {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DL, HTMLTag("dl", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}
/**
 * Definition description
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun I_DL.dd(classes : String? = null, crossinline block : DD.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    DD(attributesMapOf("class", classes), consumer).visit(block)
}

/**
 * Definition term
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun I_DL.dt(classes : String? = null, crossinline block : DT.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    DT(attributesMapOf("class", classes), consumer).visit(block)
}


@Suppress("unused")
interface I_DT {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class DT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_DT, HTMLTag("dt", consumer, initialAttributes, null, false, false), HtmlInlineTag {

}

