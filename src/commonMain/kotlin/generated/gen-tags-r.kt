package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
interface I_RP {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class RP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_RP, HTMLTag("rp", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
interface I_RT {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class RT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_RT, HTMLTag("rt", consumer, initialAttributes, null, true, false), HtmlInlineTag {

}

@Suppress("unused")
interface I_RUBY {
    val consumer : TagConsumer<*>
}
@Suppress("unused")
open class RUBY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : I_RUBY, HTMLTag("ruby", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
/**
 * Ruby annotation text
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun I_RUBY.rt(classes : String? = null, crossinline block : RT.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    RT(attributesMapOf("class", classes), consumer).visit(block)
}

/**
 * Parenthesis for ruby annotation text
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun I_RUBY.rp(classes : String? = null, crossinline block : RP.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    RP(attributesMapOf("class", classes), consumer).visit(block)
}

val RUBY.asFlowContent : FlowContent
    get()  = this

val RUBY.asPhrasingContent : PhrasingContent
    get()  = this


