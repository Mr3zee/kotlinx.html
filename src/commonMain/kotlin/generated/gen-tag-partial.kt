package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

/**
 * Media source for 
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.source(classes : String? = null, crossinline block : SOURCE.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    SOURCE(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Table column
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.col(classes : String? = null, crossinline block : COL.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    COL(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Selectable choice
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.option(classes : String? = null, crossinline block : OPTION.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    OPTION(attributesMapOf("class", classes), consumer).visit(block)
}
/**
 * Selectable choice
 */
@HtmlTagMarker
fun Partial.option(classes : String? = null, content : String = "") : Unit = OPTION(attributesMapOf("class", classes), consumer).visit({+content})


/**
 * Fieldset legend
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.legend(classes : String? = null, crossinline block : LEGEND.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    LEGEND(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Definition description
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.dd(classes : String? = null, crossinline block : DD.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    DD(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Definition term
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.dt(classes : String? = null, crossinline block : DT.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    DT(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Caption for 
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.figcaption(classes : String? = null, crossinline block : FIGCAPTION.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    FIGCAPTION(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Heading
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.h1(classes : String? = null, crossinline block : H1.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    H1(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Heading
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.h2(classes : String? = null, crossinline block : H2.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    H2(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Heading
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.h3(classes : String? = null, crossinline block : H3.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    H3(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Heading
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.h4(classes : String? = null, crossinline block : H4.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    H4(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Heading
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.h5(classes : String? = null, crossinline block : H5.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    H5(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Heading
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.h6(classes : String? = null, crossinline block : H6.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    H6(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Document body
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.body(classes : String? = null, crossinline block : BODY.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    BODY(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Document head
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.head(crossinline block : HEAD.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    HEAD(emptyMap, consumer).visit(block)
}
@Suppress("DEPRECATION", "DeprecatedCallableAddReplaceWith")
@Deprecated("This tag doesn't support content or requires unsafe (try unsafe {})")
/**
 * Document head
 */
@HtmlTagMarker
fun Partial.head(content : String = "") : Unit = HEAD(emptyMap, consumer).visit({+content})


/**
 * Named property value
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.param(name : String? = null, value : String? = null, classes : String? = null, crossinline block : PARAM.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    PARAM(attributesMapOf("name", name,"value", value,"class", classes), consumer).visit(block)
}


/**
 * List item
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.li(classes : String? = null, crossinline block : LI.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    LI(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Embedded image
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.img(alt : String? = null, src : String? = null, loading : ImgLoading? = null, classes : String? = null, crossinline block : IMG.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    IMG(attributesMapOf("alt", alt,"src", src,"loading", loading?.enumEncode(),"class", classes), consumer).visit(block)
}
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.eagerImg(alt : String? = null, src : String? = null, classes : String? = null, crossinline block : IMG.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    IMG(attributesMapOf("alt", alt,"src", src,"loading", ImgLoading.eager.realValue,"class", classes), consumer).visit(block)
}
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.lazyImg(alt : String? = null, src : String? = null, classes : String? = null, crossinline block : IMG.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    IMG(attributesMapOf("alt", alt,"src", src,"loading", ImgLoading.lazy.realValue,"class", classes), consumer).visit(block)
}


/**
 * Ruby annotation text
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.rt(classes : String? = null, crossinline block : RT.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    RT(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Parenthesis for ruby annotation text
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.rp(classes : String? = null, crossinline block : RP.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    RP(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Option group
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.optGroup(label : String? = null, classes : String? = null, crossinline block : OPTGROUP.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    OPTGROUP(attributesMapOf("label", label,"class", classes), consumer).visit(block)
}


/**
 * Table caption
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.caption(classes : String? = null, crossinline block : CAPTION.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    CAPTION(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Table column group
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.colGroup(classes : String? = null, crossinline block : COLGROUP.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    COLGROUP(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Table header
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.thead(classes : String? = null, crossinline block : THEAD.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    THEAD(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Table footer
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.tfoot(classes : String? = null, crossinline block : TFOOT.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TFOOT(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Table body
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.tbody(classes : String? = null, crossinline block : TBODY.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TBODY(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Table row
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TR(attributesMapOf("class", classes), consumer).visit(block)
}


/**
 * Table header cell
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.th(scope : ThScope? = null, classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TH(attributesMapOf("scope", scope?.enumEncode(),"class", classes), consumer).visit(block)
}
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.colTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TH(attributesMapOf("scope", ThScope.col.realValue,"class", classes), consumer).visit(block)
}
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.colGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TH(attributesMapOf("scope", ThScope.colGroup.realValue,"class", classes), consumer).visit(block)
}
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.rowTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TH(attributesMapOf("scope", ThScope.row.realValue,"class", classes), consumer).visit(block)
}
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.rowGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TH(attributesMapOf("scope", ThScope.rowGroup.realValue,"class", classes), consumer).visit(block)
}


/**
 * Table data cell
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun Partial.td(classes : String? = null, crossinline block : TD.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    TD(attributesMapOf("class", classes), consumer).visit(block)
}



interface Partial : I_A, I_ABBR, I_ADDRESS, I_AREA, I_ARTICLE, I_ASIDE, I_AUDIO, I_B, I_BASE, I_BDI, I_BDO, I_BLOCKQUOTE, I_BODY, I_BR, I_BUTTON, I_CANVAS, I_CAPTION, I_CITE, I_CODE, I_COL, I_COLGROUP, I_COMMAND, I_DATALIST, I_DD, I_DEL, I_DETAILS, I_DFN, I_DIALOG, I_DIV, I_DL, I_DT, I_EM, I_EMBED, I_FIELDSET, I_FIGCAPTION, I_FIGURE, I_FOOTER, I_FORM, I_H1, I_H2, I_H3, I_H4, I_H5, I_H6, I_HEAD, I_HEADER, I_HGROUP, I_HR, I_HTML, I_I, I_IFRAME, I_IMG, I_INPUT, I_INS, I_KBD, I_KEYGEN, I_LABEL, I_LEGEND, I_LI, I_LINK, I_MAIN, I_MAP, I_MARK, I_MATH, I_MATHML, I_META, I_METER, I_NAV, I_NOSCRIPT, I_OBJECT, I_OL, I_OPTGROUP, I_OPTION, I_OUTPUT, I_P, I_PARAM, I_PICTURE, I_PRE, I_PROGRESS, I_Q, I_RP, I_RT, I_RUBY, I_S, I_SAMP, I_SCRIPT, I_SECTION, I_SELECT, I_SLOT, I_SMALL, I_SOURCE, I_SPAN, I_STRONG, I_STYLE, I_SUB, I_SUMMARY, I_SUP, I_SVG, I_TABLE, I_TBODY, I_TD, I_TEMPLATE, I_TEXTAREA, I_TFOOT, I_TH, I_THEAD, I_TIME, I_TITLE, I_TR, I_U, I_UL, I_VAR, I_VIDEO, FlowContent {
}
